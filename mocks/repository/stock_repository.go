// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/rydhshlkhn/techtest-mirae/domain"
	mock "github.com/stretchr/testify/mock"
)

// StockRepository is an autogenerated mock type for the StockRepository type
type StockRepository struct {
	mock.Mock
}

// CreateStock provides a mock function with given fields: stock
func (_m *StockRepository) CreateStock(stock *domain.Stock) error {
	ret := _m.Called(stock)

	if len(ret) == 0 {
		panic("no return value specified for CreateStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Stock) error); ok {
		r0 = rf(stock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStock provides a mock function with given fields: id
func (_m *StockRepository) DeleteStock(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllStock provides a mock function with given fields:
func (_m *StockRepository) GetAllStock() []domain.Stock {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllStock")
	}

	var r0 []domain.Stock
	if rf, ok := ret.Get(0).(func() []domain.Stock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Stock)
		}
	}

	return r0
}

// GetStockByID provides a mock function with given fields: id
func (_m *StockRepository) GetStockByID(id int) (*domain.Stock, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStockByID")
	}

	var r0 *domain.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Stock, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Stock); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStock provides a mock function with given fields: stock
func (_m *StockRepository) UpdateStock(stock *domain.Stock) error {
	ret := _m.Called(stock)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Stock) error); ok {
		r0 = rf(stock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStockRepository creates a new instance of StockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StockRepository {
	mock := &StockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
